import React, { useState, useEffect } from "react";
import { Col, Card, Table, Button, Form, Modal, Spinner, Alert } from "react-bootstrap";
import PDFPreviewEditor from "../PrintsPDF/PDFPreviewEditor";
import { useNavigate } from "react-router-dom";

const PrescriptionSection = ({
  prescriptionRows,
  setPrescriptionRows,
  removePrescription,
  handleRemoveWithConfirm,
  isFormDisabled,
  selectedTodayPatient,
  symptoms,
  diagnosis,
  services,
  setToast,
  diagnoses,
}) => {
  const API_BASE_URL = 'http://localhost:8000';
  const navigate = useNavigate();
  
  const [editingIndex, setEditingIndex] = useState(null);
  const [newRow, setNewRow] = useState({
    medicine: '',
    quantity: '',
    dosage: '',
    unitPrice: 0,
    totalPrice: 0
  });
  const [suggestions, setSuggestions] = useState([]);

  // TH√äM STATE CHO PDF PREVIEW
  const [showPDFPreview, setShowPDFPreview] = useState(false);
  const [pdfPreviewData, setPdfPreviewData] = useState(null);
  const [previewHTML, setPreviewHTML] = useState('');
  const [isLoadingPreview, setIsLoadingPreview] = useState(false);
  const [previewError, setPreviewError] = useState(null);

  // Reset form khi chuy·ªÉn tr·∫°ng th√°i
  useEffect(() => {
    if (editingIndex === null) {
      setNewRow({
        medicine: '',
        quantity: '',
        dosage: '',
        unitPrice: 0,
        totalPrice: 0
      });
    } else {
      setNewRow({ ...prescriptionRows[editingIndex] });
    }
  }, [editingIndex, prescriptionRows]);

  // Search g·ª£i √Ω thu·ªëc
  useEffect(() => {
    const delayDebounce = setTimeout(async () => {
      if (newRow.medicine.trim().length >= 2) {
        try {
          const response = await fetch(
            `${API_BASE_URL}/api/doctor/medicines/search?q=${encodeURIComponent(newRow.medicine)}`,
            {
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
              }
            }
          );
          if (response.ok) {
            const data = await response.json();
            setSuggestions(data);
          }
        } catch (err) {
          console.error("L·ªói khi t√¨m thu·ªëc:", err);
        }
      } else {
        setSuggestions([]);
      }
    }, 300);

    return () => clearTimeout(delayDebounce);
  }, [newRow.medicine]);

  // FIX: H√ÄM CH·ªåN G·ª¢I √ù - L·∫§Y ƒê·∫¶Y ƒê·ª¶ TH√îNG TIN T·ª™ AI
  const handleSelectSuggestion = (medicine) => {
    console.log("üéØ D·ªØ li·ªáu thu·ªëc t·ª´ AI:", medicine);
    
    const newUnitPrice = medicine.Price ? parseFloat(medicine.Price) : 0;
    const quantity = newRow.quantity || 1;
    const newTotalPrice = quantity * newUnitPrice;
    
    // T·∫†O LI·ªÄU D√ôNG M·∫∂C ƒê·ªäNH T·ª™ TH√îNG TIN AI
    const defaultDosage = generateDosageFromAI(medicine);
    
    setNewRow(prev => ({
      ...prev,
      medicine: medicine.MedicineName,
      unitPrice: newUnitPrice,
      totalPrice: newTotalPrice,
      dosage: defaultDosage
    }));
    setSuggestions([]);
    
    console.log("‚úÖ ƒê√£ ƒëi·ªÅn th√¥ng tin:", {
      name: medicine.MedicineName,
      price: newUnitPrice,
      dosage: defaultDosage
    });
  };

  // H√ÄM PH·ª§ TR·ª¢ ƒê·ªÇ T·∫†O LI·ªÄU D√ôNG T·ª™ TH√îNG TIN AI
  const generateDosageFromAI = (medicine) => {
    if (medicine.Reason) {
      // Ph√¢n t√≠ch l√Ω do ƒë·ªÉ g·ª£i √Ω li·ªÅu d√πng
      const reason = medicine.Reason.toLowerCase();
      if (reason.includes("gi·∫£m ƒëau") || reason.includes("ƒëau rƒÉng")) {
        return "1 vi√™n/l·∫ßn, 2-3 l·∫ßn/ng√†y sau khi ƒÉn";
      } else if (reason.includes("kh√°ng sinh") || reason.includes("nhi·ªÖm khu·∫©n")) {
        return "1 vi√™n/l·∫ßn, 2 l·∫ßn/ng√†y (s√°ng, t·ªëi)";
      } else if (reason.includes("b·∫£o v·ªá d·∫° d√†y") || reason.includes("omeprazole")) {
        return "1 vi√™n/ng√†y, u·ªëng tr∆∞·ªõc khi ƒÉn s√°ng 30 ph√∫t";
      }
      return `Theo ch·ªâ ƒë·ªãnh: ${medicine.Reason.substring(0, 60)}...`;
    }
    return "Theo ch·ªâ ƒë·ªãnh c·ªßa b√°c sƒ©";
  };

  // FUNCTION PREVIEW PDF - ƒê·∫¢M B·∫¢O D·ªÆ LI·ªÜU LU√îN M·ªöI NH·∫§T
  const handlePreview = async () => {
    if (!selectedTodayPatient || prescriptionRows.length === 0) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è Vui l√≤ng ch·ªçn b·ªánh nh√¢n v√† th√™m √≠t nh·∫•t m·ªôt ƒë∆°n thu·ªëc tr∆∞·ªõc khi xem tr∆∞·ªõc.",
        variant: "warning",
      });
      return;
    }

    const previewData = {
      type: 'prescription',
      patient_name: selectedTodayPatient.name || 'N/A',
      age: String(selectedTodayPatient.age || 'N/A'),
      gender: selectedTodayPatient.gender || 'N/A',
      phone: selectedTodayPatient.phone || 'N/A',
      appointment_date: selectedTodayPatient.date
        ? new Date(selectedTodayPatient.date).toLocaleDateString('vi-VN')
        : new Date().toLocaleDateString('vi-VN'),
      appointment_time: selectedTodayPatient.time || new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' }),
      doctor_name: selectedTodayPatient.doctor_name || 'B√°c sƒ© ch∆∞a r√µ',
      prescriptions: [
        {
          details: prescriptionRows.map(row => ({
            medicine: row.medicine || 'N/A',
            quantity: parseInt(row.quantity) || 1,
            dosage: row.dosage || 'N/A',
            unitPrice: parseFloat(row.unitPrice) || 0,
          })),
        },
      ],
      diagnoses: diagnoses || [],
      services: services || [],
      // TH√äM C√ÅC TR∆Ø·ªúNG C·∫¶N THI·∫æT CHO VI·ªÜC CH·ªàNH S·ª¨A
      appointment_id: selectedTodayPatient.id || selectedTodayPatient.AppointmentId,
      patient_id: selectedTodayPatient.PatientId || selectedTodayPatient.patient_id,
      originalData: {
        prescriptionRows: [...prescriptionRows], // COPY D·ªÆ LI·ªÜU M·ªöI NH·∫§T
        symptoms,
        diagnosis,
        services,
        diagnoses
      },
      timestamp: Date.now() // TH√äM TIMESTAMP ƒê·ªÇ ƒê·∫¢M B·∫¢O D·ªÆ LI·ªÜU M·ªöI
    };

    console.log('üì§ Data preview toa thu·ªëc g·ª≠i ƒë·∫øn editor (L·∫¶N M·ªöI):', previewData);

    try {
      // X√ìA D·ªÆ LI·ªÜU C≈® TR∆Ø·ªöC KHI L∆ØU M·ªöI
      sessionStorage.removeItem('pdfEditorData');
      sessionStorage.removeItem('shouldRefreshOnReturn');
      sessionStorage.removeItem('editorSource');
      
      // L∆∞u data M·ªöI NH·∫§T v√†o sessionStorage
      sessionStorage.setItem('pdfEditorData', JSON.stringify(previewData));
      sessionStorage.setItem('shouldRefreshOnReturn', 'true');
      sessionStorage.setItem('editorSource', 'prescription');

      // CHUY·ªÇN H∆Ø·ªöNG TRONG C√ôNG TAB
      navigate('/doctor/print-pdf-editor', { 
        state: { 
          pdfData: previewData,
          source: 'prescription',
          timestamp: Date.now()
        }
      });

      setToast({
        show: true,
        message: "‚úÖ ƒêang chuy·ªÉn ƒë·∫øn tr√¨nh ch·ªânh s·ª≠a PDF...",
        variant: "success",
      });

    } catch (error) {
      console.error('Error navigating to PDF editor:', error);
      setToast({
        show: true,
        message: "‚ùå L·ªói khi chuy·ªÉn ƒë·∫øn tr√¨nh ch·ªânh s·ª≠a PDF",
        variant: "danger",
      });
    }
  };

  // FUNCTION X·ª¨ L√ù KHI D·ªÆ LI·ªÜU ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T T·ª™ EDITOR
  const handleEditorDataUpdate = (updatedData) => {
    if (updatedData.prescriptionRows) {
      setPrescriptionRows(updatedData.prescriptionRows);
    }
    if (updatedData.diagnosis) {
      // N·∫øu b·∫°n c√≥ setDiagnosis prop, th√™m v√†o ƒë√¢y
      // setDiagnosis(updatedData.diagnosis);
    }
    
    setToast({
      show: true,
      message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ tr√¨nh ch·ªânh s·ª≠a PDF",
      variant: "success",
    });
  };

  // KI·ªÇM TRA KHI COMPONENT MOUNT XEM C√ì D·ªÆ LI·ªÜU C·∫¶N C·∫¨P NH·∫¨T T·ª™ EDITOR KH√îNG
  useEffect(() => {
    const shouldRefresh = sessionStorage.getItem('shouldRefreshOnReturn');
    const editorSource = sessionStorage.getItem('editorSource');
    const editorData = sessionStorage.getItem('pdfEditorData');
    
    // Ch·ªâ x·ª≠ l√Ω n·∫øu d·ªØ li·ªáu ƒë·∫øn t·ª´ PrescriptionSection
    if (shouldRefresh === 'true' && editorSource === 'prescription' && editorData) {
      try {
        const parsedData = JSON.parse(editorData);
        
        // KI·ªÇM TRA TIMESTAMP ƒê·ªÇ ƒê·∫¢M B·∫¢O L√Ä D·ªÆ LI·ªÜU M·ªöI
        const currentTimestamp = Date.now();
        const dataTimestamp = parsedData.timestamp || 0;
        
        // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu d·ªØ li·ªáu kh√¥ng qu√° c≈© (trong v√≤ng 10 ph√∫t)
        if (currentTimestamp - dataTimestamp < 10 * 60 * 1000) {
          // C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ editor
          if (parsedData.originalData) {
            handleEditorDataUpdate(parsedData.originalData);
          }
          console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu M·ªöI t·ª´ PDF editor');
        } else {
          console.log('‚ö†Ô∏è D·ªØ li·ªáu t·ª´ PDF editor ƒë√£ qu√° c≈©, b·ªè qua');
        }
        
      } catch (error) {
        console.error('Error processing editor return data:', error);
      } finally {
        // LU√îN RESET FLAG SAU KHI X·ª¨ L√ù
        sessionStorage.removeItem('shouldRefreshOnReturn');
        sessionStorage.removeItem('editorSource');
        sessionStorage.removeItem('pdfEditorData');
      }
    }
  }, []);

  // X√ìA D·ªÆ LI·ªÜU KHI COMPONENT UNMOUNT ƒê·ªÇ TR√ÅNH D√ôNG D·ªÆ LI·ªÜU C≈®
  useEffect(() => {
    return () => {
      sessionStorage.removeItem('shouldRefreshOnReturn');
      sessionStorage.removeItem('editorSource');
      sessionStorage.removeItem('pdfEditorData');
    };
  }, []);

  // LOAD PREVIEW HTML - C·∫¢I THI·ªÜN V·ªöI X·ª¨ L√ù L·ªñI CHI TI·∫æT
  const loadPreviewHTML = async (data) => {
    setIsLoadingPreview(true);
    setPreviewError(null);
    try {
      const response = await fetch(`${API_BASE_URL}/api/print/preview-html`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(data),
      });

      // Ki·ªÉm tra HTTP status
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText || 'L·ªói server'}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setPreviewHTML(result.html);
        console.log('‚úÖ Preview HTML loaded successfully');
      } else {
        const errorMsg = result.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server';
        setPreviewError(errorMsg);
        console.error('‚ùå Preview API error:', errorMsg);
        setToast({
          show: true,
          message: `L·ªói t·∫£i preview: ${errorMsg}`,
          variant: "danger",
        });
      }
    } catch (error) {
      const errorMsg = `L·ªói k·∫øt n·ªëi: ${error.message}`;
      setPreviewError(errorMsg);
      console.error('‚ùå Preview load error:', error);
      setToast({
        show: true,
        message: `L·ªói t·∫£i preview: ${error.message}`,
        variant: "danger",
      });
    } finally {
      setIsLoadingPreview(false);
    }
  };

  // RELOAD PREVIEW - C·∫¢I THI·ªÜN
  const reloadPreview = () => {
    if (pdfPreviewData) {
      console.log('üîÑ Reloading preview...');
      loadPreviewHTML(pdfPreviewData);
    } else {
      console.warn('‚ö†Ô∏è No preview data to reload');
    }
  };

  const handleFieldChange = (field, value) => {
    let updatedRow = { ...newRow };
    
    if (field === 'quantity' || field === 'unitPrice') {
      updatedRow[field] = field === 'quantity' ? value : Number(value);
      
      const quantity = field === 'quantity' ? value : newRow.quantity;
      const unitPrice = field === 'unitPrice' ? Number(value) : newRow.unitPrice;
      updatedRow.totalPrice = (quantity || 0) * (unitPrice || 0);
    } else {
      updatedRow[field] = value;
    }
    
    setNewRow(updatedRow);
  };

  const startEditing = (index) => {
    setEditingIndex(index);
  };

  const cancelEditing = () => {
    setEditingIndex(null);
    setSuggestions([]);
  };

  const handleAddNew = () => {
    if (!newRow.medicine.trim() || !newRow.quantity || !newRow.dosage.trim()) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin thu·ªëc!",
        variant: "warning",
      });
      return;
    }

    if (newRow.unitPrice < 0) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è ƒê∆°n gi√° kh√¥ng ƒë∆∞·ª£c √¢m!",
        variant: "warning",
      });
      return;
    }

    const newMedicine = {
      medicine: newRow.medicine.trim(),
      quantity: Number(newRow.quantity),
      dosage: newRow.dosage.trim(),
      unitPrice: Number(newRow.unitPrice),
      totalPrice: Number(newRow.quantity) * Number(newRow.unitPrice)
    };

    setPrescriptionRows(prev => [...prev, newMedicine]);
    
    setNewRow({
      medicine: '',
      quantity: '',
      dosage: '',
      unitPrice: 0,
      totalPrice: 0
    });
    
    setToast({
      show: true,
      message: "‚úÖ Th√™m thu·ªëc th√†nh c√¥ng!",
      variant: "success",
    });
  };

  const handleUpdate = () => {
    if (!newRow.medicine.trim() || !newRow.quantity || !newRow.dosage.trim()) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin thu·ªëc!",
        variant: "warning",
      });
      return;
    }

    const updatedMedicine = {
      medicine: newRow.medicine.trim(),
      quantity: Number(newRow.quantity),
      dosage: newRow.dosage.trim(),
      unitPrice: Number(newRow.unitPrice),
      totalPrice: Number(newRow.quantity) * Number(newRow.unitPrice)
    };

    const updatedRows = [...prescriptionRows];
    updatedRows[editingIndex] = updatedMedicine;
    setPrescriptionRows(updatedRows);
    
    cancelEditing();
    
    setToast({
      show: true,
      message: "‚úÖ C·∫≠p nh·∫≠t thu·ªëc th√†nh c√¥ng!",
      variant: "success",
    });
  };

  const handlePrint = async () => {
    if (!selectedTodayPatient || prescriptionRows.length === 0) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è Vui l√≤ng ch·ªçn b·ªánh nh√¢n v√† th√™m √≠t nh·∫•t m·ªôt ƒë∆°n thu·ªëc tr∆∞·ªõc khi in.",
        variant: "warning",
      });
      return;
    }

    try {
      const printData = {
        type: 'prescription',
        patient_name: selectedTodayPatient.name || 'N/A',
        age: String(selectedTodayPatient.age || 'N/A'),
        gender: selectedTodayPatient.gender || 'N/A',
        phone: selectedTodayPatient.phone || 'N/A',
        appointment_date: selectedTodayPatient.date
          ? new Date(selectedTodayPatient.date).toLocaleDateString('vi-VN')
          : new Date().toLocaleDateString('vi-VN'),
        appointment_time: selectedTodayPatient.time || new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' }),
        doctor_name: selectedTodayPatient.doctor_name || 'B√°c sƒ© ch∆∞a r√µ',
        prescriptions: [
          {
            details: prescriptionRows.map(row => ({
              medicine: row.medicine || 'N/A',
              quantity: parseInt(row.quantity) || 1,
              dosage: row.dosage || 'N/A',
              unitPrice: parseFloat(row.unitPrice) || 0,
            })),
          },
        ],
        diagnoses: diagnoses || [],
        services: services || [],
      };

      const response = await fetch(`${API_BASE_URL}/api/print/prescription/preview`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(printData),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `TOA_THUOC_${selectedTodayPatient.name || 'benh_nhan'}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        setToast({
          show: true,
          message: "‚úÖ Xu·∫•t toa thu·ªëc th√†nh c√¥ng!",
          variant: "success",
        });
      } else {
        const errorText = await response.text();
        throw new Error(errorText || `L·ªói server: ${response.status}`);
      }
    } catch (error) {
      console.error('Error exporting prescription:', error);
      setToast({
        show: true,
        message: `L·ªói khi xu·∫•t toa thu·ªëc: ${error.message}`,
        variant: "danger",
      });
    }
  };

  return (
    <Col md={12}>
      <Card className="mb-3 border-light shadow-sm">
        <Card.Header className="text-start fw-bold">
          3. K√™ ƒë∆°n thu·ªëc
        </Card.Header>
        <Card.Body className="text-start">
          <Table striped bordered hover responsive>
            <thead>
              <tr>
                <th width="25%">T√™n thu·ªëc</th>
                <th width="10%">S·ªë l∆∞·ª£ng</th>
                <th width="20%">Li·ªÅu d√πng</th>
                <th width="15%">ƒê∆°n gi√° (VND)</th>
                <th width="15%">Th√†nh ti·ªÅn (VND)</th>
                <th width="15%">H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {prescriptionRows.map((row, index) => (
                <tr key={index}>
                  {editingIndex === index ? (
                    <>
                      <td>
                        <Form.Group style={{ position: 'relative' }}>
                          <Form.Control
                            type="text"
                            value={newRow.medicine}
                            onChange={(e) => handleFieldChange('medicine', e.target.value)}
                            required
                          />
                          {suggestions.length > 0 && (
                            <div 
                              className="suggestion-dropdown"
                              style={{
                                position: 'absolute',
                                top: '100%',
                                left: 0,
                                right: 0,
                                backgroundColor: 'white',
                                border: '1px solid #ddd',
                                borderRadius: '4px',
                                zIndex: 1000,
                                maxHeight: '200px',
                                overflowY: 'auto'
                              }}
                            >
                              {suggestions.map((s, i) => (
                                <div 
                                  key={i} 
                                  className="suggestion-item p-2 border-bottom"
                                  onClick={() => handleSelectSuggestion(s)}
                                  style={{
                                    cursor: 'pointer', 
                                    backgroundColor: '#f8f9fa',
                                    transition: 'background-color 0.2s'
                                  }}
                                  onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'}
                                  onMouseLeave={(e) => e.target.style.backgroundColor = '#f8f9fa'}
                                >
                                  <div><strong>{s.MedicineName}</strong> ({s.Unit})</div>
                                  <div className="text-success">üí∞ {s.Price?.toLocaleString()}‚Ç´</div>
                                  <div className="text-muted small mt-1">{s.Reason}</div>
                                </div>
                              ))}
                            </div>
                          )}
                        </Form.Group>
                      </td>
                      <td>
                        <Form.Control
                          type="number"
                          min="1"
                          value={newRow.quantity}
                          onChange={(e) => handleFieldChange('quantity', e.target.value)}
                          required
                        />
                      </td>
                      <td>
                        <Form.Control
                          type="text"
                          value={newRow.dosage}
                          onChange={(e) => handleFieldChange('dosage', e.target.value)}
                          required
                        />
                      </td>
                      <td>
                        <Form.Control
                          type="number"
                          min="0"
                          step="100"
                          value={newRow.unitPrice}
                          onChange={(e) => handleFieldChange('unitPrice', e.target.value)}
                          required
                        />
                      </td>
                      <td className="align-middle">
                        {newRow.totalPrice?.toLocaleString() || 0}
                      </td>
                      <td>
                        <Button
                          variant="outline-success"
                          size="sm"
                          onClick={handleUpdate}
                        >
                          üíæ L∆∞u
                        </Button>
                        <Button
                          variant="outline-secondary"
                          size="sm"
                          className="ms-1 mt-1"
                          onClick={cancelEditing}
                        >
                          ‚ùå H·ªßy
                        </Button>
                      </td>
                    </>
                  ) : (
                    <>
                      <td>{row.medicine}</td>
                      <td>{row.quantity}</td>
                      <td>{row.dosage}</td>
                      <td>{row.unitPrice?.toLocaleString() || 0}</td>
                      <td>{row.totalPrice?.toLocaleString() || 0}</td>
                      <td>
                        <Button
                          variant="outline-danger"
                          size="sm"
                          onClick={() => handleRemoveWithConfirm(index)}
                          disabled={isFormDisabled}
                        >
                          üóëÔ∏è X√≥a
                        </Button>
                        <Button
                          variant="outline-secondary"
                          size="sm"
                          className="ms-1 mt-1"
                          onClick={() => startEditing(index)}
                          disabled={isFormDisabled}
                        >
                          ‚úèÔ∏è S·ª≠a
                        </Button>
                      </td>
                    </>
                  )}
                </tr>
              ))}
              
              {/* D√≤ng th√™m m·ªõi */}
              <tr style={{ backgroundColor: '#f8f9fa' }}>
                <td>
                  <Form.Group style={{ position: 'relative' }}>
                    <Form.Control
                      type="text"
                      placeholder="Nh·∫≠p t√™n thu·ªëc..."
                      value={newRow.medicine}
                      onChange={(e) => handleFieldChange('medicine', e.target.value)}
                      disabled={editingIndex !== null}
                    />
                    {suggestions.length > 0 && editingIndex === null && (
                      <div 
                        className="suggestion-dropdown"
                        style={{
                          position: 'absolute',
                          top: '100%',
                          left: 0,
                          right: 0,
                          backgroundColor: 'white',
                          border: '1px solid #ddd',
                          borderRadius: '4px',
                          zIndex: 1000,
                          maxHeight: '200px',
                          overflowY: 'auto'
                        }}
                      >
                        {suggestions.map((s, i) => (
                          <div 
                            key={i} 
                            className="suggestion-item p-2 border-bottom"
                            onClick={() => handleSelectSuggestion(s)}
                            style={{
                              cursor: 'pointer', 
                              backgroundColor: '#f8f9fa',
                              transition: 'background-color 0.2s'
                            }}
                            onMouseEnter={(e) => e.target.style.backgroundColor = '#e9ecef'}
                            onMouseLeave={(e) => e.target.style.backgroundColor = '#f8f9fa'}
                          >
                            <div><strong>{s.MedicineName}</strong> ({s.Unit})</div>
                            <div className="text-success">üí∞ {s.Price?.toLocaleString()}‚Ç´</div>
                            <div className="text-muted small mt-1">{s.Reason}</div>
                          </div>
                        ))}
                      </div>
                    )}
                  </Form.Group>
                </td>
                <td>
                  <Form.Control
                    type="number"
                    min="1"
                    placeholder="0"
                    value={newRow.quantity}
                    onChange={(e) => handleFieldChange('quantity', e.target.value)}
                    disabled={editingIndex !== null}
                  />
                </td>
                <td>
                  <Form.Control
                    type="text"
                    placeholder="Li·ªÅu d√πng..."
                    value={newRow.dosage}
                    onChange={(e) => handleFieldChange('dosage', e.target.value)}
                    disabled={editingIndex !== null}
                  />
                </td>
                <td>
                  <Form.Control
                    type="number"
                    min="0"
                    step="100"
                    placeholder="0"
                    value={newRow.unitPrice}
                    onChange={(e) => handleFieldChange('unitPrice', e.target.value)}
                    disabled={editingIndex !== null}
                  />
                </td>
                <td className="align-middle">
                  <strong>{newRow.totalPrice?.toLocaleString() || 0}</strong>
                </td>
                <td>
                  <Button
                    variant="primary"
                    size="sm"
                    onClick={handleAddNew}
                    disabled={editingIndex !== null || isFormDisabled}
                  >
                    ‚ûï Th√™m
                  </Button>
                </td>
              </tr>
            </tbody>
          </Table>
          
          {prescriptionRows.length === 0 && (
            <div className="text-center text-muted py-3">
              Ch∆∞a c√≥ thu·ªëc n√†o trong ƒë∆°n. H√£y th√™m thu·ªëc b·∫±ng c√°ch ƒëi·ªÅn th√¥ng tin v√†o d√≤ng cu·ªëi c√πng.
            </div>
          )}
        </Card.Body>
      </Card>
      
      <div className="d-flex gap-2">
        <Button
          variant="outline-info"
          onClick={handlePreview}
          disabled={!selectedTodayPatient || prescriptionRows.length === 0}
          className="no-print"
        >
          üëÅÔ∏è Xem tr∆∞·ªõc PDF
        </Button>
        
        <Button
          variant="outline-success"
          onClick={handlePrint}
          disabled={!selectedTodayPatient || prescriptionRows.length === 0}
          className="no-print"
        >
          üñ®Ô∏è Xu·∫•t toa thu·ªëc
        </Button>
      </div>

      {/* MODAL PREVIEW TOA THU·ªêC - V·∫™N GI·ªÆ ƒê·ªÇ D·ª∞ PH√íNG */}
      <Modal show={showPDFPreview} onHide={() => setShowPDFPreview(false)} size="xl" centered>
        <Modal.Header closeButton>
          <Modal.Title>üëÅÔ∏è Xem tr∆∞·ªõc Toa Thu·ªëc</Modal.Title>
        </Modal.Header>
        <Modal.Body style={{ minHeight: '500px' }}>
          <PDFPreviewEditor
            previewHTML={previewHTML}
            isLoadingPreview={isLoadingPreview}
            onReloadPreview={reloadPreview}
            type="prescription"
            error={previewError}
          />
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowPDFPreview(false)}>
            ƒê√≥ng
          </Button>
          <Button 
            variant="success" 
            onClick={() => {
              handlePrint();
              setShowPDFPreview(false);
            }}
            disabled={isLoadingPreview || previewError}
          >
            {isLoadingPreview ? <Spinner size="sm" /> : 'üíæ T·∫£i v·ªÅ PDF'}
          </Button>
        </Modal.Footer>
      </Modal>
    </Col>
  );
};

export default PrescriptionSection;