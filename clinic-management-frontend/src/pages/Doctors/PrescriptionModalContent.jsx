import React, { useState, useEffect } from "react";
import { Form, Button } from "react-bootstrap";


const PrescriptionModalContent = ({ onSubmit, onClose, defaultData = null }) => {
  const [medicine, setMedicine] = useState("");
  const [quantity, setQuantity] = useState("");
  const [dosage, setDosage] = useState("");
  const [isDirty, setIsDirty] = useState(false);

  // üîπ Khi s·ª≠a thu·ªëc, t·ª± ƒë·ªông ƒëi·ªÅn d·ªØ li·ªáu v√†o form
  useEffect(() => {
    if (defaultData) {
      setMedicine(defaultData.medicine || "");
      setQuantity(defaultData.quantity || "");
      setDosage(defaultData.dosage || "");
    } else {
      // Reset khi th√™m m·ªõi
      setMedicine("");
      setQuantity("");
      setDosage("");
    }
    setIsDirty(false);
  }, [defaultData]);

  // Theo d√µi thay ƒë·ªïi form
  const handleInputChange = (setter, value) => {
    setter(value);
    if (!isDirty) {
      setIsDirty(true);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!medicine || !quantity || !dosage) {
      Swal.fire({
        icon: "warning",
        title: "Thi·∫øu th√¥ng tin!",
        text: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin thu·ªëc tr∆∞·ªõc khi l∆∞u.",
        confirmButtonText: "ƒê√£ hi·ªÉu",
        confirmButtonColor: "#0d6efd",
      });
      return;
    }

    const isEditing = !!defaultData;

    // ‚úÖ H·ªôp tho·∫°i x√°c nh·∫≠n th√™m ho·∫∑c s·ª≠a thu·ªëc
    const result = await Swal.fire({
      title: isEditing ? "X√°c nh·∫≠n c·∫≠p nh·∫≠t thu·ªëc?" : "X√°c nh·∫≠n th√™m thu·ªëc?",
      text: isEditing
        ? `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin cho "${medicine}" kh√¥ng?`
        : `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m "${medicine}" v√†o ƒë∆°n kh√¥ng?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonText: isEditing ? "C·∫≠p nh·∫≠t" : "Th√™m thu·ªëc",
      cancelButtonText: "H·ªßy",
      confirmButtonColor: "#0d6efd",
      cancelButtonColor: "#6c757d",
      reverseButtons: true,
      customClass: {
        popup: "rounded-4 shadow",
      },
    });

    if (result.isConfirmed) {
      onSubmit({ medicine, quantity, dosage });

      // ‚úÖ Hi·ªán th√¥ng b√°o k·∫øt qu·∫£
      Swal.fire({
        icon: "success",
        title: isEditing ? "ƒê√£ c·∫≠p nh·∫≠t thu·ªëc!" : "ƒê√£ th√™m thu·ªëc!",
        text: isEditing
          ? `${medicine} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.`
          : `${medicine} ƒë√£ ƒë∆∞·ª£c th√™m v√†o ƒë∆°n.`,
        timer: 1500,
        showConfirmButton: false,
      });

      // reset ch·ªâ khi th√™m thu·ªëc m·ªõi
      if (!isEditing) {
        setMedicine("");
        setQuantity("");
        setDosage("");
      }
      setIsDirty(false);
      onClose(); // Close modal sau khi submit th√†nh c√¥ng
    }
  };

  // X·ª≠ l√Ω h·ªßy v·ªõi confirm n·∫øu c√≥ thay ƒë·ªïi
  const handleCancel = async () => {
    if (isDirty) {
      const result = await Swal.fire({
        title: 'X√°c nh·∫≠n h·ªßy?',
        text: 'C√°c thay ƒë·ªïi b·∫°n ƒë√£ th·ª±c hi·ªán s·∫Ω b·ªã m·∫•t. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'C√≥, h·ªßy!',
        cancelButtonText: 'Gi·ªØ l·∫°i'
      });

      if (result.isConfirmed) {
        onClose();
      }
    } else {
      onClose();
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <Form.Group className="mb-3 text-start">
        <Form.Label>T√™n thu·ªëc</Form.Label>
        <Form.Control
          type="text"
          value={medicine}
          onChange={(e) => handleInputChange(setMedicine, e.target.value)}
          placeholder="Nh·∫≠p t√™n thu·ªëc"
        />
      </Form.Group>

      <Form.Group className="mb-3 text-start">
        <Form.Label>S·ªë l∆∞·ª£ng</Form.Label>
        <Form.Control
          type="text"
          value={quantity}
          onChange={(e) => handleInputChange(setQuantity, e.target.value)}
          placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
        />
      </Form.Group>

      <Form.Group className="mb-3 text-start">
        <Form.Label>Li·ªÅu d√πng</Form.Label>
        <Form.Control
          type="text"
          value={dosage}
          onChange={(e) => handleInputChange(setDosage, e.target.value)}
          placeholder="Nh·∫≠p li·ªÅu d√πng (v√≠ d·ª•: 1 vi√™n x 2 l·∫ßn/ng√†y)"
        />
      </Form.Group>

      <div className="d-flex justify-content-end gap-2 mt-3">
        <Button variant="secondary" onClick={handleCancel}>
          H·ªßy
        </Button>
        <Button variant="primary" type="submit">
          {defaultData ? "C·∫≠p nh·∫≠t thu·ªëc" : "L∆∞u thu·ªëc"}
        </Button>
      </div>
    </Form>
  );
};

export default PrescriptionModalContent;