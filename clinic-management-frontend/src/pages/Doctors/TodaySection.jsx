import React, { useState, useRef, useCallback, useEffect } from "react";
import {
  Card,
  ListGroup,
  Form,
  Table,
  Row,
  Col,
  Button,
  Badge,
  Toast,
  ToastContainer,
  Modal,
  Spinner,
} from "react-bootstrap";
// import Swal from 'sweetalert2';
import PrescriptionModalContent from './PrescriptionModalContent';

const API_BASE_URL = 'http://localhost:8000';

const TodaySection = ({
  currentSection = "today",
  prescriptionRows = [],
  setPrescriptionRows = () => { },
  removePrescription = () => { },
  editPrescription = () => { },
  symptoms = "",
  setSymptoms = () => { },
  diagnosis = "",
  setDiagnosis = () => { },
  tests = { test1: false, test2: false, test3: true },
  setTests = () => { },
  requestedTests = {},
  setRequestedTests = () => { },
  openPrescriptionModal = () => { },
  handleTempSave = () => { },
  selectedTodayPatient = null,
  setSelectedTodayPatient = () => { },
}) => {
  const [todayPatients, setTodayPatients] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [toast, setToast] = useState({ show: false, message: "", variant: "" });
  const [showModal, setShowModal] = useState(false);
  const [defaultData, setDefaultData] = useState(null);
  const [editIndex, setEditIndex] = useState(null);
  const printRef = useRef(null);
  const cache = useRef(new Map());
  const debounceRef = useRef(null);

  // üß† AI G·ª£i √Ω thu·ªëc v√† d·ªãch v·ª• d·ª±a tr√™n ch·∫©n ƒëo√°n
  const [aiSuggestions, setAiSuggestions] = useState([]);
  const [serviceSuggestions, setServiceSuggestions] = useState([]);
  const [aiLoading, setAiLoading] = useState(false); // Loading cho thu·ªëc
  const [serviceLoading, setServiceLoading] = useState(false); // Loading cho d·ªãch v·ª•

  useEffect(() => {
    if (!diagnosis || diagnosis.length < 3) {
      setAiSuggestions([]);
      setServiceSuggestions([]);
      return;
    }

    // G·ª£i √Ω thu·ªëc
    setAiLoading(true);
    const timeoutMedicine = setTimeout(async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/api/doctor/ai/suggestion?diagnosis=${encodeURIComponent(diagnosis)}&type=medicine`);
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        const data = await res.json();
        if (Array.isArray(data)) {
          setAiSuggestions(data);
        } else {
          throw new Error("D·ªØ li·ªáu g·ª£i √Ω thu·ªëc kh√¥ng ph·∫£i m·∫£ng JSON");
        }
      } catch (err) {
        console.error("AI suggestion error (medicine):", err);
        setToast({
          show: true,
          message: `L·ªói g·ª£i √Ω thu·ªëc: ${err.message}`,
          variant: "danger",
        });
        setAiSuggestions([]);
      } finally {
        setAiLoading(false);
      }
    }, 800);

    // G·ª£i √Ω d·ªãch v·ª•
    setServiceLoading(true);
    const timeoutService = setTimeout(async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/api/doctor/ai/suggestion?diagnosis=${encodeURIComponent(diagnosis)}&type=service`);
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        const data = await res.json();
        if (Array.isArray(data)) {
          setServiceSuggestions(data);
        } else {
          throw new Error("D·ªØ li·ªáu g·ª£i √Ω d·ªãch v·ª• kh√¥ng ph·∫£i m·∫£ng JSON");
        }
      } catch (err) {
        console.error("Service suggestion error:", err);
        setToast({
          show: true,
          message: `L·ªói g·ª£i √Ω d·ªãch v·ª•: ${err.message}`,
          variant: "danger",
        });
        setServiceSuggestions([]);
      } finally {
        setServiceLoading(false);
      }
    }, 800);

    return () => {
      clearTimeout(timeoutMedicine);
      clearTimeout(timeoutService);
    };
  }, [diagnosis]);



  const isFormDisabled = selectedTodayPatient && selectedTodayPatient?.status === 'ƒêang kh√°m' ? false : true;

  const testLabels = {
    test1: "X√©t nghi·ªám c√¥ng th·ª©c m√°u",
    test2: "Ch·ª•p X-quang ph·ªïi",
    test3: "N·ªôi soi tai m≈©i h·ªçng"
  };

  const getStatusVariant = (status) => {
    if (!status) return "secondary";

    // H·ªó tr·ª£ c·∫£ ti·∫øng Vi·ªát v√† ti·∫øng Anh
    switch (status.toLowerCase()) {
      case "done":
      case "ƒë√£ kh√°m":
        return "success"; // M√†u xanh

      case "in-progress":
      case "ƒëang kh√°m":
        return "info"; // M√†u xanh d∆∞∆°ng nh·∫°t

      case "waiting":
      case "ƒëang ch·ªù":
      case "ch·ªù kh√°m":
        return "warning"; // M√†u v√†ng

      default:
        return "secondary"; // M√†u x√°m
    }
  };

  const getStatusText = (status) => {
    if (!status) return "";
    // N·∫øu backend g·ª≠i ti·∫øng Vi·ªát th√¨ hi·ªÉn th·ªã nguy√™n vƒÉn
    if (["ƒê√£ kh√°m", "ƒêang kh√°m", "ƒêang ch·ªù"].includes(status)) return status;

    // N·∫øu backend g·ª≠i m√£ ti·∫øng Anh th√¨ map sang ti·∫øng Vi·ªát
    switch (status.toLowerCase()) {
      case "done":
        return "ƒê√£ kh√°m";
      case "in-progress":
        return "ƒêang kh√°m";
      case "waiting":
        return "ƒêang ch·ªù";
      default:
        return status;
    }
  };

  // ‚úÖ Filter ch·ªâ 3 tr·∫°ng th√°i ·ªü frontend
  const filterValidStatuses = (patients) => {
    const validStatuses = ["ƒê√£ kh√°m", "ƒêang kh√°m", "ƒêang ch·ªù"];
    return patients.filter(patient => validStatuses.includes(getStatusText(patient.status)));
  };

  const handleTestChange = (key) => (e) => {
    setTests({ ...tests, [key]: e.target.checked });
  };

  // Fetch todayPatients t·ª´ API (t∆∞∆°ng t·ª± AdminMedicine)
  const fetchTodayPatients = useCallback(async () => {
    if (cache.current.has('today-patients')) {
      const data = cache.current.get('today-patients');
      setTodayPatients(filterValidStatuses(data)); // ‚úÖ Filter sau khi l·∫•y data
      return;
    }

    if (debounceRef.current) clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      try {
        setIsLoading(true);
        const response = await fetch(`${API_BASE_URL}/api/doctor/today-patients`, {
          headers: {
            'Accept': 'application/json',
          },
          credentials: 'include',
        });
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await response.json();
        const filteredData = filterValidStatuses(data); // ‚úÖ Filter ch·ªâ 3 tr·∫°ng th√°i
        cache.current.set('today-patients', data); // Cache data g·ªëc
        setTodayPatients(filteredData);
      } catch (error) {
        console.error('Error fetching today patients:', error);
        setToast({
          show: true,
          message: `L·ªói khi t·∫£i danh s√°ch b·ªánh nh√¢n: ${error.message}`,
          variant: "danger",
        });
      } finally {
        setIsLoading(false);
      }
    }, 300);
  }, []);

  // Load data khi component mount
  useEffect(() => {
    fetchTodayPatients();
    return () => {
      if (debounceRef.current) clearTimeout(debounceRef.current);
    };
  }, [fetchTodayPatients]);

  // ‚úÖ H√†m t√¨m b·ªánh nh√¢n ti·∫øp theo g·∫ßn nh·∫•t (tr·∫°ng th√°i "ƒêang ch·ªù", th·ªùi gian g·∫ßn nh·∫•t sau b·ªánh nh√¢n hi·ªán t·∫°i)
  const findNextPatient = useCallback((currentPatientId, patients) => {
    if (!currentPatientId || !patients.length) return null;

    // Parse th·ªùi gian ƒë·ªÉ so s√°nh (gi·∫£ s·ª≠ time l√† string 'HH:MM')
    const parseTime = (timeStr) => {
      const [hours, minutes] = timeStr.split(':').map(Number);
      return hours * 60 + minutes;
    };

    const currentTime = parseTime(patients.find(p => p.id === currentPatientId)?.time || '00:00');

    // L·ªçc b·ªánh nh√¢n "ƒêang ch·ªù", th·ªùi gian > currentTime, s·∫Øp x·∫øp theo th·ªùi gian asc
    const waitingPatientsAfter = patients
      .filter(p => getStatusText(p.status) === 'ƒêang ch·ªù' && parseTime(p.time) > currentTime)
      .sort((a, b) => parseTime(a.time) - parseTime(b.time));

    return waitingPatientsAfter[0] || null; // Tr·∫£ v·ªÅ b·ªánh nh√¢n ƒë·∫ßu ti√™n (g·∫ßn nh·∫•t)
  }, []);

  // ‚úÖ Implement handleExaminationSubmit: Submit d·ªØ li·ªáu, update status, ch·ªçn next patient
  const handleExaminationSubmit = async (e) => {
    e.preventDefault();
    if (!selectedTodayPatient) {
      setToast({ show: true, message: "‚ö†Ô∏è Ch∆∞a ch·ªçn b·ªánh nh√¢n.", variant: "warning" });
      return;
    }

    setIsLoading(true);
    try {
      const submitData = {
        symptoms,
        diagnosis,
        tests: { ...tests }, // C√°c tests ƒë∆∞·ª£c ch·ªçn
        prescriptions: [...prescriptionRows], // Danh s√°ch thu·ªëc
        status: 'done', // Update status th√†nh done
      };

      const response = await fetch(`${API_BASE_URL}/api/doctor/examinations/${selectedTodayPatient.id}/complete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(submitData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const result = await response.json();
      console.log('Submit th√†nh c√¥ng:', result);

      // Reset form sau submit
      setSymptoms('');
      setDiagnosis('');
      setTests({ test1: false, test2: false, test3: false });
      setRequestedTests({});
      setPrescriptionRows([]);

      // Refetch todayPatients ƒë·ªÉ c·∫≠p nh·∫≠t status m·ªõi
      await fetchTodayPatients();

      // T√¨m v√† ch·ªçn b·ªánh nh√¢n ti·∫øp theo
      const nextPatient = findNextPatient(selectedTodayPatient.id, todayPatients);
      if (nextPatient) {
        setSelectedTodayPatient(nextPatient);
        setToast({
          show: true,
          message: `‚úÖ Ho√†n t·∫•t kh√°m cho ${selectedTodayPatient.name}. ƒê√£ chuy·ªÉn sang b·ªánh nh√¢n ti·∫øp theo: ${nextPatient.name}.`,
          variant: "success",
        });
      } else {
        setSelectedTodayPatient(null);
        setToast({
          show: true,
          message: `‚úÖ Ho√†n t·∫•t kh√°m cho ${selectedTodayPatient.name}. Kh√¥ng c√≤n b·ªánh nh√¢n ch·ªù kh√°m h√¥m nay.`,
          variant: "success",
        });
      }
    } catch (error) {
      console.error('Error submitting examination:', error);
      setToast({
        show: true,
        message: `L·ªói khi ho√†n t·∫•t kh√°m: ${error.message}`,
        variant: "danger",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ N√∫t y√™u c·∫ßu d·ªãch v·ª•
  const handleRequestService = () => {
    const selected = Object.keys(tests).filter((k) => tests[k]);
    if (selected.length === 0) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• n√†o.",
        variant: "warning",
      });
      return;
    }

    const updated = { ...requestedTests };
    selected.forEach((key) => (updated[key] = true));
    setRequestedTests(updated);

    setToast({
      show: true,
      message: "‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu th·ª±c hi·ªán d·ªãch v·ª• c·∫≠n l√¢m s√†ng.",
      variant: "success",
    });
  };

  // ‚úÖ Render checkbox c√≥ d·∫•u ‚Äúƒê√£ y√™u c·∫ßu ‚úÖ‚Äù
  const renderService = (label, key) => (
    <div className="d-flex justify-content-between align-items-center mb-2">
      <Form.Check
        type="checkbox"
        label={label}
        checked={tests[key]}
        onChange={handleTestChange(key)}
        disabled={isFormDisabled}
      />
      {requestedTests[key] && (
        <Badge bg="success" pill className="ms-2">
          ‚úÖ ƒê√£ y√™u c·∫ßu
        </Badge>
      )}
    </div>
  );

  // X·ª≠ l√Ω x√≥a v·ªõi SweetAlert2 confirm
  const handleRemoveWithConfirm = async (index) => {
    const result = await Swal.fire({
      title: 'X√°c nh·∫≠n x√≥a',
      text: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a thu·ªëc n√†y kh·ªèi ƒë∆°n?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'C√≥, x√≥a!',
      cancelButtonText: 'H·ªßy'
    });

    if (result.isConfirmed) {
      removePrescription(index);
      setToast({
        show: true,
        message: "‚úÖ ƒê√£ x√≥a thu·ªëc kh·ªèi ƒë∆°n.",
        variant: "success",
      });
    }
  };

  // M·ªü modal th√™m thu·ªëc m·ªõi
  const handleOpenAddModal = () => {
    setDefaultData(null);
    setEditIndex(null);
    setShowModal(true);
  };

  // M·ªü modal s·ª≠a thu·ªëc
  const handleEdit = (index) => {
    const medicineToEdit = prescriptionRows[index];
    setDefaultData(medicineToEdit);
    setEditIndex(index);
    setShowModal(true);
  };

  // X·ª≠ l√Ω submit t·ª´ modal (th√™m ho·∫∑c s·ª≠a)
  const handleModalSubmit = (submittedData) => {
    if (editIndex !== null) {
      editPrescription(submittedData, editIndex);
      setToast({
        show: true,
        message: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t thu·ªëc "${submittedData.medicine}".`,
        variant: "success",
      });
    } else {
      setPrescriptionRows([...prescriptionRows, submittedData]);
      setToast({
        show: true,
        message: `‚úÖ ƒê√£ th√™m thu·ªëc "${submittedData.medicine}".`,
        variant: "success",
      });
    }
    setShowModal(false);
    setDefaultData(null);
    setEditIndex(null);
  };

  // X·ª≠ l√Ω close modal
  const handleModalClose = () => {
    setShowModal(false);
    setDefaultData(null);
    setEditIndex(null);
  };

  // H√†m in t√†i li·ªáu
  const printDocument = (type) => {
    if (!selectedTodayPatient) {
      setToast({
        show: true,
        message: "‚ö†Ô∏è Ch∆∞a ch·ªçn b·ªánh nh√¢n.",
        variant: "warning",
      });
      return;
    }

    const { name: patientName, age, gender, phone } = selectedTodayPatient;
    const currentSymptoms = symptoms;
    const currentDiagnosis = diagnosis;
    const codePrefix = type === 'service' ? 'DV' : 'TT';
    const code = codePrefix + Math.floor(Math.random() * 10000).toString().padStart(4, '0');
    const date = new Date().toLocaleDateString('vi-VN');
    const doctor = 'Tr·∫ßn Th·ªã B';

    let title = '';
    let tableHtml = '';
    let extraSection = '';
    let footerLeft = 'B·ªánh nh√¢n';
    let footerRight = 'B√°c sƒ© ch·ªâ ƒë·ªãnh';

    if (type === 'service') {
      title = 'PHI·∫æU CH·ªà ƒê·ªäNH D·ªäCH V·ª§ C·∫¨N L√ÇM S√ÄNG';
      const selectedTests = Object.entries(tests)
        .filter(([key, value]) => value)
        .map(([key]) => testLabels[key]);
      tableHtml = `
        <table>
          <thead>
            <tr>
              <th>STT</th>
              <th>T√™n d·ªãch v·ª•</th>
              <th>Ghi ch√∫</th>
              <th>T·ªïng ti·ªÅn</th>
            </tr>
          </thead>
          <tbody>
            ${selectedTests.length > 0
          ? selectedTests
            .map((test, i) => `
                    <tr>
                      <td style="text-align:center;">${i + 1}</td>
                      <td>${test}</td>
                      <td></td>
                      <td></td>
                    </tr>
                  `)
            .join('')
          : '<tr><td colspan="4" style="text-align:center;">Kh√¥ng c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c ch·ªçn</td></tr>'
        }
          </tbody>
        </table>
      `;
    } else if (type === 'prescription') {
      title = 'TOA THU·ªêC';
      extraSection = `
        <div class="diagnosis-section">
          <p><strong>Tri·ªáu ch·ª©ng:</strong> ${currentSymptoms}</p>
          <p><strong>Ch·∫©n ƒëo√°n:</strong> ${currentDiagnosis}</p>
        </div>
      `;
      tableHtml = `
        <table>
          <thead>
            <tr>
              <th>STT</th>
              <th>T√™n thu·ªëc</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>Li·ªÅu d√πng</th>
            </tr>
          </thead>
          <tbody>
            ${prescriptionRows.length > 0
          ? prescriptionRows
            .map((row, i) => `
                    <tr>
                      <td style="text-align:center;">${i + 1}</td>
                      <td>${row.medicine}</td>
                      <td>${row.quantity}</td>
                      <td>${row.dosage}</td>
                    </tr>
                  `)
            .join('')
          : '<tr><td colspan="4" style="text-align:center;">Kh√¥ng c√≥ thu·ªëc n√†o ƒë∆∞·ª£c k√™</td></tr>'
        }
          </tbody>
        </table>
      `;
      footerRight = 'B√°c sƒ© k√™ ƒë∆°n';
    }

    const html = `
      <div class="container">
        <div class="header">
          <img src="https://cdn-icons-png.flaticon.com/512/2966/2966327.png" alt="Logo">
          <h2>PH√íNG KH√ÅM XYZ</h2>
          <p>ƒê·ªãa ch·ªâ: S·ªë 53 V√µ VƒÉn Ng√¢n, TP. Th·ªß ƒê·ª©c, TP.HCM</p>
          <p>ƒêi·ªán tho·∫°i: 024.3574.7788 ‚Äî MST: 0100688738</p>
        </div>
        <div class="title">
          <h3>${title}</h3>
        </div>
        <div class="info">
          <div>
            <p><strong>H·ªç t√™n BN:</strong> ${patientName}</p>
            <p><strong>Tu·ªïi:</strong> ${age}</p>
            <p><strong>Gi·ªõi t√≠nh:</strong> ${gender}</p>
          </div>
          <div>
            <p><strong>M√£ ${type === 'service' ? 'phi·∫øu' : 'toa'}:</strong> ${code}</p>
            <p><strong>Ng√†y l·∫≠p:</strong> ${date}</p>
            <p><strong>B√°c sƒ©:</strong> ${doctor}</p>
          </div>
        </div>
        ${extraSection}
        ${tableHtml}
        <div class="footer">
          <div>
            <p><strong>${footerLeft}</strong></p>
            <p>(K√Ω, ghi r√µ h·ªç t√™n)</p>
            <p class="name">&nbsp;</p>
          </div>
          <div>
            <p><strong>${footerRight}</strong></p>
            <p>(K√Ω, ghi r√µ h·ªç t√™n)</p>
            <p class="name">${doctor}</p>
          </div>
        </div>
      </div>
      <style>
        body {
          font-family: "Times New Roman", serif;
          background: #fefefe;
          margin: 40px;
          color: #000;
        }
        .container {
          border: 2px solid #000;
          padding: 30px 40px;
          border-radius: 6px;
          max-width: 700px;
          margin: auto;
          background: #fff;
        }
        .header {
          text-align: center;
          border-bottom: 2px solid #000;
          padding-bottom: 10px;
          margin-bottom: 20px;
        }
        .header img {
          width: 80px;
          height: auto;
          margin-bottom: 5px;
        }
        .header h2 {
          margin: 5px 0;
          font-size: 22px;
          text-transform: uppercase;
        }
        .header p {
          margin: 2px 0;
          font-size: 13px;
          color: #333;
        }
        .title {
          text-align: center;
          margin: 25px 0;
        }
        .title h3 {
          font-size: 20px;
          margin: 0;
          text-decoration: underline;
          font-weight: bold;
        }
        .info {
          font-size: 14px;
          display: flex;
          justify-content: space-between;
          margin-bottom: 10px;
        }
        .info p { margin: 3px 0; }
        .diagnosis-section {
          margin-bottom: 20px;
          font-size: 14px;
        }
        .diagnosis-section p {
          margin: 5px 0;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 15px;
          font-size: 14px;
        }
        th, td {
          border: 1px solid #000;
          padding: 8px 10px;
          text-align: left;
        }
        th {
          background: #f3f3f3;
          text-align: center;
        }
        .footer {
          display: flex;
          justify-content: space-between;
          margin-top: 40px;
          font-size: 14px;
          text-align: center;
        }
        .footer div {
          width: 45%;
        }
        .footer p {
          margin: 4px 0;
        }
        .footer .name {
          margin-top: 50px;
          font-style: italic;
        }
      </style>
    `;

    if (printRef.current) {
      printRef.current.innerHTML = html;
    }
    window.print();
    setTimeout(() => {
      if (printRef.current) {
        printRef.current.innerHTML = '';
      }
    }, 1000);
  };

  // Render danh s√°ch b·ªánh nh√¢n t·ª´ API (ƒë√£ filter ·ªü state)
  const renderPatientList = () => (
    <ListGroup variant="flush" className="patient-list">
      {isLoading ? (
        <ListGroup.Item className="text-center">
          <Spinner animation="border" size="sm" />
          <p className="mt-2 text-muted">ƒêang t·∫£i danh s√°ch b·ªánh nh√¢n...</p>
        </ListGroup.Item>
      ) : todayPatients.length === 0 ? (
        <ListGroup.Item className="text-center text-muted">
          Kh√¥ng c√≥ l·ªãch h·∫πn h√¥m nay
        </ListGroup.Item>
      ) : (
        todayPatients.map((patient, index) => (
          <ListGroup.Item
            key={patient.id || index}
            action
            active={selectedTodayPatient?.id === patient.id}
            onClick={() => setSelectedTodayPatient(selectedTodayPatient?.id === patient.id ? null : patient)}
            className={getStatusVariant(patient.status)}
          >
            <div className="d-flex w-100 justify-content-between align-items-center">
              <div>
                <h6 className="mb-1">{patient.time} - {patient.name}</h6>
                <small>{patient.age} tu·ªïi, {patient.gender} | {patient.phone}</small>
              </div>
              <Badge bg={getStatusVariant(patient.status)}>
                {getStatusText(patient.status)}
              </Badge>
            </div>
          </ListGroup.Item>
        ))
      )}
    </ListGroup>
  );

  return (
    <>
      <style>{`
        @media print {
          body * { visibility: hidden; }
          #print-content, #print-content * { visibility: visible; }
          #print-content { position: absolute; left: 0; top: 0; width: 100%; display: block !important; }
          .no-print { display: none !important; }
        }
      `}</style>
      <div className={`section ${currentSection === "today" ? "active" : ""}`} id="today">
        <Row>
          {/* Danh s√°ch b·ªánh nh√¢n t·ª´ API */}
          <Col md={4}>
            <Card className="h-100 shadow-sm">
              <Card.Header className="bg-primary text-white text-start">
                <h5 className="mb-0">Danh s√°ch kh√°m ({new Date().toLocaleDateString('vi-VN')})</h5>
              </Card.Header>
              <Card.Body className="p-0">
                {renderPatientList()}
              </Card.Body>
            </Card>
          </Col>

          {/* Form kh√°m */}
          <Col md={8}>
            <Card className="shadow-sm">
              <Card.Header className="bg-info text-white text-start">
                <h5 className="mb-0">Th√¥ng Tin Kh√°m B·ªánh</h5>
              </Card.Header>
              <Card.Body>
                <p className="card-text text-start">
                  {selectedTodayPatient ? (
                    <>
                      <strong>B·ªánh nh√¢n:</strong> {selectedTodayPatient.name} -{" "}
                      <strong>Tu·ªïi:</strong> {selectedTodayPatient.age} -{" "}
                      <strong>Gi·ªõi t√≠nh:</strong> {selectedTodayPatient.gender} -{" "}
                      <strong>SƒêT:</strong> {selectedTodayPatient.phone} -{" "}
                      <strong>Gi·ªù:</strong> {selectedTodayPatient.time} -{" "}
                      <strong>Tr·∫°ng th√°i:</strong>{" "}
                      {getStatusText(selectedTodayPatient.status)}
                    </>
                  ) : (
                    <span className="text-muted">Ch∆∞a ch·ªçn b·ªánh nh√¢n n√†o</span>
                  )}
                </p>
                <hr />

                <Form onSubmit={handleExaminationSubmit}>
                  <Row>
                    {/* 1. Ch·∫©n ƒëo√°n */}
                    <Col md={12}>
                      <Card className="mb-3 border-light shadow-sm">
                        <Card.Header className="text-start fw-bold">
                          1. Ch·∫©n ƒëo√°n
                        </Card.Header>
                        <Card.Body>
                          <Form.Group className="mb-3 text-start">
                            <Form.Label>Tri·ªáu ch·ª©ng</Form.Label>
                            <Form.Control
                              as="textarea"
                              rows={3}
                              value={symptoms}
                              onChange={(e) => setSymptoms(e.target.value)}
                              disabled={isFormDisabled}
                            />
                          </Form.Group>
                          <Form.Group className="mb-3 text-start">
                            <Form.Label>Ch·∫©n ƒëo√°n s∆° b·ªô</Form.Label>
                            <Form.Control
                              type="text"
                              value={diagnosis}
                              onChange={(e) => setDiagnosis(e.target.value)}
                              disabled={isFormDisabled}
                            />
                            {aiLoading && (
                              <div className="text-center mt-2">
                                <Spinner animation="border" size="sm" /> ƒêang t·∫£i g·ª£i √Ω...
                              </div>
                            )}
                            {aiSuggestions.length > 0 && (
                              <div className="ai-suggestions">
                                <h6>üß† G·ª£i √Ω thu·ªëc ph√π h·ª£p:</h6>
                                <ul className="mb-0">
                                  {aiSuggestions.map((item, i) => (
                                    <li key={i}>
                                      <div className="medicine-info">
                                        <b>{item.MedicineName}</b> ‚Äî <i>{item.Reason}</i>
                                      </div>
                                      <Button
                                        variant="outline-success"
                                        size="sm"
                                        className="ms-2"
                                        onClick={() => {
                                          const existingItem = prescriptionRows.find(row => row.medicine === item.MedicineName);
                                          if (existingItem) {
                                            // N·∫øu thu·ªëc ƒë√£ t·ªìn t·∫°i, tƒÉng quantity
                                            const updatedRows = prescriptionRows.map(row =>
                                              row.medicine === item.MedicineName
                                                ? { ...row, quantity: row.quantity + 1 }
                                                : row
                                            );
                                            setPrescriptionRows(updatedRows);
                                          } else {
                                            // N·∫øu ch∆∞a t·ªìn t·∫°i, th√™m h√†ng m·ªõi v·ªõi quantity = 1
                                            setPrescriptionRows(prev => [...prev, { medicine: item.MedicineName, quantity: 1, dosage: '' }]);
                                          }
                                          setToast({ show: true, message: `‚úÖ ƒê√£ th√™m "${item.MedicineName}" v√†o toa thu·ªëc.`, variant: "success" });
                                        }}
                                      >
                                        + Th√™m
                                      </Button>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </Form.Group>
                        </Card.Body>
                      </Card>
                    </Col>


                    {/* 2. Ch·ªâ ƒë·ªãnh d·ªãch v·ª• */}
                    <Col md={12}>
                      <Card className="mb-3 border-light shadow-sm">
                        <Card.Header className="text-start fw-bold">
                          2. Ch·ªâ ƒë·ªãnh d·ªãch v·ª• c·∫≠n l√¢m s√†ng
                        </Card.Header>
                        <Card.Body className="text-start">
                          <Form.Group className="mb-3">
                            {serviceSuggestions.length > 0 && (
                              <div className="ai-suggestions mb-3">
                                <h6>ü©∫ G·ª£i √Ω d·ªãch v·ª• ph√π h·ª£p:</h6>
                                <ul className="mb-0">
                                  {serviceSuggestions.map((service, i) => (
                                    <li key={i}>
                                      <div className="medicine-info">
                                        <b>{service.ServiceName}</b> ‚Äî <i>{service.Reason || "ƒê·ªÅ xu·∫•t d·ª±a tr√™n ch·∫©n ƒëo√°n"}</i>
                                      </div>
                                      <Button
                                        variant="outline-primary"
                                        size="sm"
                                        className="ms-2"
                                        onClick={() => {
                                          const serviceKey = Object.keys(testLabels).find(key => testLabels[key] === service.ServiceName);
                                          if (serviceKey) {
                                            setTests(prev => ({ ...prev, [serviceKey]: !prev[serviceKey] })); // Toggle checkbox
                                            setToast({
                                              show: true,
                                              message: `‚úÖ ƒê√£ ${!tests[serviceKey] ? 'ch·ªçn' : 'b·ªè ch·ªçn'} d·ªãch v·ª• "${service.ServiceName}".`,
                                              variant: "success",
                                            });
                                          }
                                        }}
                                      >
                                        {tests[Object.keys(testLabels).find(key => testLabels[key] === service.ServiceName)] ? "‚úì ƒê√£ ch·ªçn" : "+ Ch·ªçn"}
                                      </Button>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            )}
                            {serviceLoading && (
                              <div className="text-center mt-2">
                                <Spinner animation="border" size="sm" /> ƒêang t·∫£i g·ª£i √Ω d·ªãch v·ª•...
                              </div>
                            )}
                            {Object.entries(testLabels).map(([key, label]) => renderService(label, key))}
                          </Form.Group>

                          <div className="text-end">
                            <Button
                              variant="outline-primary"
                              size="sm"
                              onClick={handleRequestService}
                              disabled={isFormDisabled || Object.values(tests).every(v => !v)}
                              className="no-print"
                            >
                              üßæ Y√™u c·∫ßu th·ª±c hi·ªán d·ªãch v·ª• ƒë√£ ch·ªçn
                            </Button>
                            <Button
                              variant="outline-success"
                              size="sm"
                              onClick={() => printDocument('service')}
                              disabled={!selectedTodayPatient || !Object.values(tests).some(Boolean)}
                              className="no-print ms-2"
                            >
                              üñ®Ô∏è Xu·∫•t ch·ªâ ƒë·ªãnh d·ªãch v·ª•
                            </Button>
                          </div>

                          <hr />
                          <p>
                            <strong>K·∫øt qu·∫£ (n·∫øu c√≥):</strong>{" "}
                            <a href="#">Xem file ƒë√≠nh k√®m...</a>
                          </p>
                        </Card.Body>
                      </Card>
                    </Col>

                    {/* 3. K√™ ƒë∆°n thu·ªëc */}
                    <Col md={12}>
                      <Card className="mb-3 border-light shadow-sm">
                        <Card.Header className="text-start fw-bold">
                          3. K√™ ƒë∆°n thu·ªëc
                        </Card.Header>
                        <Card.Body className="text-start">
                          <Table striped bordered hover responsive>
                            <thead>
                              <tr>
                                <th>T√™n thu·ªëc</th>
                                <th>S·ªë l∆∞·ª£ng</th>
                                <th>Li·ªÅu d√πng</th>
                                <th>H√†nh ƒë·ªông</th>
                              </tr>
                            </thead>
                            <tbody>
                              {prescriptionRows.map((row, index) => (
                                <tr key={index}>
                                  <td>{row.medicine}</td>
                                  <td>{row.quantity}</td>
                                  <td>{row.dosage}</td>
                                  <td>
                                    <Button
                                      variant="outline-danger"
                                      size="sm"
                                      onClick={() => handleRemoveWithConfirm(index)}
                                      disabled={isFormDisabled}
                                    >
                                      X√≥a
                                    </Button>
                                    <Button
                                      variant="outline-secondary"
                                      size="sm"
                                      className="ms-2"
                                      onClick={() => handleEdit(index)}
                                      disabled={isFormDisabled}
                                    >
                                      S·ª≠a
                                    </Button>
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </Table>
                          <Button
                            variant="link"
                            onClick={handleOpenAddModal}
                            className="text-decoration-none fw-bold"
                            disabled={isFormDisabled}
                          >
                            + Th√™m thu·ªëc v√†o ƒë∆°n
                          </Button>
                        </Card.Body>
                      </Card>
                    </Col>
                  </Row>

                  <div className="d-flex justify-content-start gap-2 mt-3">
                    <Button
                      variant="success"
                      type="submit"
                      disabled={isFormDisabled || isLoading}
                      className="no-print"
                    >
                      {isLoading ? <Spinner animation="border" size="sm" /> : null}
                      Ho√†n T·∫•t & L∆∞u H·ªì S∆°
                    </Button>
                    <Button
                      variant="secondary"
                      type="button"
                      onClick={handleTempSave}
                      disabled={isFormDisabled}
                      className="no-print"
                    >
                      T·∫°m L∆∞u
                    </Button>
                    <Button
                      variant="outline-success"
                      onClick={() => printDocument('prescription')}
                      disabled={!selectedTodayPatient || prescriptionRows.length === 0}
                      className="no-print"
                    >
                      üñ®Ô∏è Xu·∫•t toa thu·ªëc
                    </Button>
                  </div>
                </Form>
              </Card.Body>
            </Card>
          </Col>
        </Row>

        {/* Modal cho th√™m/s·ª≠a thu·ªëc */}
        <Modal show={showModal} onHide={handleModalClose} centered size="md">
          <Modal.Header closeButton>
            <Modal.Title>
              {defaultData ? 'S·ª≠a th√¥ng tin thu·ªëc' : 'Th√™m thu·ªëc m·ªõi'}
            </Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <PrescriptionModalContent
              onSubmit={handleModalSubmit}
              onClose={handleModalClose}
              defaultData={defaultData}
            />
          </Modal.Body>
        </Modal>

        {/* Toast */}
        <ToastContainer position="bottom-end" className="p-3">
          <Toast
            bg={toast.variant}
            onClose={() => setToast({ ...toast, show: false })}
            show={toast.show}
            delay={2500}
            autohide
          >
            <Toast.Body className="text-white fw-semibold text-start">
              {toast.message}
            </Toast.Body>
          </Toast>
        </ToastContainer>

        {/* Print content div */}
        <div id="print-content" ref={printRef} style={{ display: 'none' }} />
      </div>
    </>
  );
};

export default TodaySection;