import React, { useState, useEffect } from 'react';
import { Container, Button, Modal, Alert, Spinner } from 'react-bootstrap';
import TechnicianSidebar from '../../Components/Sidebar/TechnicianSidebar';
import TechnicianSection from '../../pages/Technician/TechnicianSection';
import technicianService from '../../services/technicianService';

const TechnicianDashboard = () => {
  const [currentSection, setCurrentSection] = useState('test-results');
  const [testResultsData, setTestResultsData] = useState([]);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [currentAction, setCurrentAction] = useState(null);
  const [actionParams, setActionParams] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Fetch initial data
  useEffect(() => {
    fetchInitialData();
  }, []);

  const fetchInitialData = async () => {
    try {
      setLoading(true);
      setError('');

      console.log('üîÑ ƒêang g·ªçi API getAssignedServices...');
      const servicesResponse = await technicianService.getAssignedServices(1);

      console.log('üì¶ API Response:', servicesResponse);
      console.log('üìä Response data:', servicesResponse.data);

      // ‚úÖ S·ª¨A L·∫†I THEO C·∫§U TR√öC TH·ª∞C T·∫æ
      // servicesResponse = {success: true, data: Array(3), pagination: {...}}
      // servicesResponse.data = Array(3) - ƒê√ÇY CH√çNH L√Ä DATA C·∫¶N L·∫§Y!

      if (servicesResponse && servicesResponse.success && Array.isArray(servicesResponse.data)) {
        console.log('‚úÖ Data nh·∫≠n ƒë∆∞·ª£c:', servicesResponse.data);
        console.log('üìã S·ªë l∆∞·ª£ng items:', servicesResponse.data.length);

        // ‚úÖ SET DATA V√ÄO STATE - ƒê√öNG C·∫§U TR√öC!
        setTestResultsData(servicesResponse.data);
      } else {
        console.log('‚ùå C·∫•u tr√∫c response kh√¥ng ƒë√∫ng');
        setTestResultsData([]);
      }

    } catch (err) {
      console.error('üí• Error fetching data:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
      setTestResultsData([]);
    } finally {
      setLoading(false);
    }
  };

  const switchSection = (sectionId) => {
    setCurrentSection(sectionId);
    setError('');
    setSuccess('');
  };

  const confirmAction = (action, ...params) => {
    setCurrentAction(action);
    setActionParams(params);
    setShowConfirmModal(true);
  };

  const executeAction = async () => {
    try {
      setLoading(true);
      setError('');

      // X·ª≠ l√Ω c√°c action ·ªü ƒë√¢y
      switch (currentAction) {
        case 'updateTestResult':
          await updateTestResult(actionParams[0], actionParams[1], actionParams[2]);
          break;
        case 'editTestResult':
          await editTestResult(actionParams[0], actionParams[1], actionParams[2], actionParams[3]);
          break;
        default:
          break;
      }

      setSuccess('Thao t√°c th√†nh c√¥ng!');
    } catch (err) {
      setError('Thao t√°c th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Error executing action:', err);
    } finally {
      setLoading(false);
      setShowConfirmModal(false);
      setCurrentAction(null);
      setActionParams([]);
    }
  };

  const updateTestResult = (testId, patient, service) => {
    console.log('C·∫≠p nh·∫≠t k·∫øt qu·∫£:', testId, patient, service);
    setSuccess(`ƒê√£ c·∫≠p nh·∫≠t k·∫øt qu·∫£ cho ${patient}`);
  };

  const editTestResult = (testId, patient, service, result) => {
    console.log('Ch·ªânh s·ª≠a k·∫øt qu·∫£:', testId, patient, service, result);
    setSuccess(`ƒê√£ ch·ªânh s·ª≠a k·∫øt qu·∫£ cho ${patient}`);
  };

  const updateStats = () => {
    // C·∫≠p nh·∫≠t th·ªëng k√™ n·∫øu c·∫ßn
  };

  const clearMessages = () => {
    setError('');
    setSuccess('');
  };

  return (
    <div className="d-flex min-vh-100 bg-light">
      <TechnicianSidebar currentSection={currentSection} switchSection={switchSection} />
      <div className="flex-grow-1 p-4" style={{ marginLeft: '250px' }}>
        <Container fluid>
          {/* Alert Messages */}
          {error && (
            <Alert variant="danger" dismissible onClose={clearMessages}>
              {error}
            </Alert>
          )}
          {success && (
            <Alert variant="success" dismissible onClose={clearMessages}>
              {success}
            </Alert>
          )}

          {loading && (
            <div className="text-center mb-3">
              <Spinner animation="border" variant="success" />
              <span className="ms-2">ƒêang x·ª≠ l√Ω...</span>
            </div>
          )}

          {/* Test Component ƒë·ªÉ debug */}
          {currentSection === 'test-results' && testResultsData.length > 0 && (
            <Alert variant="info" className="mb-3">
              <strong>Debug:</strong> ƒê√£ t·∫£i {testResultsData.length} d·ªãch v·ª• t·ª´ API
            </Alert>
          )}

          {currentSection === 'test-results' && (
            <TechnicianSection
              testResultsData={testResultsData}
              confirmAction={confirmAction}
              updateStats={updateStats}
              loading={loading}
            />
          )}
        </Container>
      </div>

      {/* Confirm Modal */}
      <Modal show={showConfirmModal} onHide={() => setShowConfirmModal(false)} centered>
        <Modal.Header closeButton className="bg-light">
          <Modal.Title>X√°c nh·∫≠n</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p id="confirmMessage">
            {currentAction === 'updateTestResult' && `B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám cho ${actionParams[1]}?`}
            {currentAction === 'editTestResult' && `B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a k·∫øt qu·∫£ x√©t nghi·ªám cho ${actionParams[1]}?`}
          </p>
          {loading && (
            <div className="text-center">
              <Spinner animation="border" size="sm" variant="success" />
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="success" onClick={executeAction} disabled={loading}>
            {loading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n'}
          </Button>
          <Button variant="secondary" onClick={() => setShowConfirmModal(false)} disabled={loading}>
            H·ªßy
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default TechnicianDashboard;