import React from 'react';
import { Card, Table, Button, Row, Col, Badge, Alert, Spinner } from 'react-bootstrap';
import technicianService from '../../services/technicianService';

const TechnicianSection = ({ testResultsData, updateStats, loading }) => {
  console.log('üéØ TechnicianSection rendered');
  console.log('üì• testResultsData t·ª´ props:', testResultsData);

  // ‚úÖ TH√äM STATE CHO COMPONENT
  const [localLoading, setLocalLoading] = React.useState(false);
  const [localError, setLocalError] = React.useState('');
  const [localSuccess, setLocalSuccess] = React.useState('');

  // ‚úÖ H√ÄM X·ª¨ L√ù THAY ƒê·ªîI TR·∫†NG TH√ÅI - ƒê√É S·ª¨A
  const handleStatusChange = async (serviceOrderId, patientName, serviceName, newStatus) => {
    try {
      setLocalLoading(true);
      setLocalError('');
      setLocalSuccess('');

      console.log(`üîÑ ƒêang thay ƒë·ªïi tr·∫°ng th√°i: ${serviceOrderId} -> ${newStatus}`);

      const response = await technicianService.updateServiceStatus(serviceOrderId, newStatus);

      console.log('‚úÖ API Response:', response);

      if (response && response.success) {
        const actionMessage = getActionMessage(newStatus, patientName, serviceName);
        setLocalSuccess(`‚úÖ ${actionMessage}`);

        // ‚úÖ QUAN TR·ªåNG: G·ªåI L·∫†I DATA ƒê·ªÇ C·∫¨P NH·∫¨T UI
        if (updateStats) {
          console.log('üîÑ ƒêang g·ªçi l·∫°i data ƒë·ªÉ c·∫≠p nh·∫≠t UI...');
          await updateStats(); // ƒê·∫£m b·∫£o h√†m n√†y re-fetch data
        }

        // ‚úÖ T·ª∞ ƒê·ªòNG ·∫®N TH√îNG B√ÅO SAU 3 GI√ÇY
        setTimeout(() => {
          setLocalSuccess('');
        }, 3000);
      } else {
        throw new Error(response?.message || 'C√≥ l·ªói x·∫£y ra');
      }

    } catch (err) {
      console.error('‚ùå L·ªói thay ƒë·ªïi tr·∫°ng th√°i:', err);
      setLocalError(`‚ùå Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.`);
    } finally {
      setLocalLoading(false);
    }
  };

  // ‚úÖ H√ÄM X·ª¨ L√ù K·∫æT QU·∫¢ X√âT NGHI·ªÜM
  const handleTestResult = async (serviceOrderId, patientName, serviceName, currentResult = '') => {
    try {
      const result = prompt(`Nh·∫≠p k·∫øt qu·∫£ ${serviceName} cho ${patientName}:`, currentResult);

      if (result && result.trim()) {
        setLocalLoading(true);

        const response = await technicianService.updateServiceResult(
          serviceOrderId,
          result.trim(),
          'Ho√†n th√†nh'
        );

        if (response && response.success) {
          setLocalSuccess(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t k·∫øt qu·∫£ "${serviceName}" cho ${patientName}`);

          // ‚úÖ RELOAD DATA
          if (updateStats) {
            updateStats();
          }
        }
      }
    } catch (err) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t k·∫øt qu·∫£:', err);
      setLocalError('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLocalLoading(false);
    }
  };

  // ‚úÖ H√ÄM L·∫§Y MESSAGE THEO TR·∫†NG TH√ÅI
  const getActionMessage = (status, patientName, serviceName) => {
    switch (status) {
      case 'ƒêang th·ª±c hi·ªán':
        return `ƒê√£ b·∫Øt ƒë·∫ßu "${serviceName}" cho ${patientName}`;
      case 'Ho√†n th√†nh':
        return `ƒê√£ ho√†n th√†nh "${serviceName}" cho ${patientName}`;
      case 'ƒê√£ h·ªßy':
        return `ƒê√£ h·ªßy "${serviceName}" cho ${patientName}`;
      default:
        return `ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i "${serviceName}" cho ${patientName}`;
    }
  };

  // ‚úÖ H√ÄM X√ÅC NH·∫¨N TR∆Ø·ªöC KHI TH·ª∞C HI·ªÜN
  const confirmStatusChange = (serviceOrderId, patientName, serviceName, newStatus, actionName) => {
    const message = getConfirmMessage(actionName, patientName, serviceName);
    if (window.confirm(message)) {
      handleStatusChange(serviceOrderId, patientName, serviceName, newStatus);
    }
  };

  // ‚úÖ H√ÄM L·∫§Y MESSAGE X√ÅC NH·∫¨N
  const getConfirmMessage = (action, patientName, serviceName) => {
    switch (action) {
      case 'start':
        return `B·∫°n c√≥ ch·∫Øc mu·ªën B·∫ÆT ƒê·∫¶U "${serviceName}" cho ${patientName}?`;
      case 'complete':
        return `B·∫°n c√≥ ch·∫Øc mu·ªën HO√ÄN TH√ÄNH "${serviceName}" cho ${patientName}?`;
      case 'cancel':
        return `B·∫°n c√≥ ch·∫Øc mu·ªën H·ª¶Y "${serviceName}" cho ${patientName}?`;
      default:
        return 'B·∫°n c√≥ ch·∫Øc mu·ªën th·ª±c hi·ªán h√†nh ƒë·ªông n√†y?';
    }
  };

  const getStatusVariant = (status) => {
    if (!status) return 'secondary';

    const statusLower = status.toLowerCase();
    if (statusLower.includes('ho√†n th√†nh')) return 'success';
    if (statusLower.includes('ƒëang th·ª±c hi·ªán')) return 'warning';
    if (statusLower.includes('ƒë√£ ch·ªâ ƒë·ªãnh')) return 'primary';
    if (statusLower.includes('ƒëang ch·ªù')) return 'secondary';
    if (statusLower.includes('ƒë√£ h·ªßy')) return 'danger';
    return 'secondary';
  };

  const formatPrice = (price) => {
    if (!price) return '0 ‚Ç´';
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return dateString;
  };

  // Th·ªëng k√™
  const totalServices = testResultsData.length;
  const completedServices = testResultsData.filter(s =>
    s.status && s.status.toLowerCase().includes('ho√†n th√†nh')
  ).length;
  const inProgressServices = testResultsData.filter(s =>
    s.status && s.status.toLowerCase().includes('ƒëang th·ª±c hi·ªán')
  ).length;
  const assignedServices = testResultsData.filter(s =>
    s.status && s.status.toLowerCase().includes('ƒë√£ ch·ªâ ƒë·ªãnh')
  ).length;
  const totalRevenue = testResultsData.reduce((total, service) => total + (service.price || 0), 0);
  const averagePrice = totalServices > 0 ? totalRevenue / totalServices : 0;

  // ‚úÖ L·∫§Y DANH S√ÅCH D·ªäCH V·ª§ ƒê√É HO√ÄN TH√ÄNH ƒê·ªÇ HI·ªÇN TH·ªä PH·∫¶N K·∫æT QU·∫¢
  const completedServicesData = testResultsData.filter(s =>
    s.status && s.status.toLowerCase().includes('ho√†n th√†nh')
  );

  return (
    <div className="section active" id="test-results">
      {/* Header Stats */}
      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h2 className="fw-bold text-dark mb-1">
                <i className="fas fa-vials text-primary me-2"></i>
                Qu·∫£n L√Ω D·ªãch V·ª•
              </h2>
              <p className="text-muted mb-0">Danh s√°ch d·ªãch v·ª• ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† k·∫øt qu·∫£ x√©t nghi·ªám</p>
            </div>
            {totalServices > 0 && (
              <Badge bg="primary" className="fs-6 px-3 py-2">
                <i className="fas fa-list-check me-2"></i>
                {totalServices} d·ªãch v·ª•
              </Badge>
            )}
          </div>
        </Col>
      </Row>

      {/* ‚úÖ TH√äM ALERT LOCAL */}
      {localError && (
        <Alert variant="danger" dismissible onClose={() => setLocalError('')}>
          {localError}
        </Alert>
      )}
      {localSuccess && (
        <Alert variant="success" dismissible onClose={() => setLocalSuccess('')}>
          {localSuccess}
        </Alert>
      )}

      {/* ‚úÖ LOADING LOCAL */}
      {localLoading && (
        <div className="text-center mb-3">
          <Spinner animation="border" variant="primary" size="sm" />
          <span className="ms-2">ƒêang x·ª≠ l√Ω...</span>
        </div>
      )}

      <Row>
        {/* Statistics Cards */}
        <Col xl={12} className="mb-4">
          <Row className="g-3">
            <Col xxl={3} lg={6}>
              <Card className="border-0 shadow-sm h-100">
                <Card.Body className="p-4">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <h6 className="card-title text-muted mb-2">T·ªïng D·ªãch V·ª•</h6>
                      <h2 className="fw-bold text-primary mb-0">{totalServices}</h2>
                      <small className="text-muted">ƒêang qu·∫£n l√Ω</small>
                    </div>
                    <div className="bg-primary bg-opacity-10 p-3 rounded">
                      <i className="fas fa-layer-group fa-2x text-primary"></i>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </Col>

            <Col xxl={3} lg={6}>
              <Card className="border-0 shadow-sm h-100">
                <Card.Body className="p-4">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <h6 className="card-title text-muted mb-2">Ho√†n Th√†nh</h6>
                      <h2 className="fw-bold text-success mb-0">{completedServices}</h2>
                      <small className="text-muted">ƒê√£ x·ª≠ l√Ω xong</small>
                    </div>
                    <div className="bg-success bg-opacity-10 p-3 rounded">
                      <i className="fas fa-check-circle fa-2x text-success"></i>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </Col>

            <Col xxl={3} lg={6}>
              <Card className="border-0 shadow-sm h-100">
                <Card.Body className="p-4">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <h6 className="card-title text-muted mb-2">ƒêang Th·ª±c Hi·ªán</h6>
                      <h2 className="fw-bold text-warning mb-0">{inProgressServices}</h2>
                      <small className="text-muted">ƒêang x·ª≠ l√Ω</small>
                    </div>
                    <div className="bg-warning bg-opacity-10 p-3 rounded">
                      <i className="fas fa-spinner fa-2x text-warning"></i>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </Col>

            <Col xxl={3} lg={6}>
              <Card className="border-0 shadow-sm h-100">
                <Card.Body className="p-4">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <h6 className="card-title text-muted mb-2">ƒê√£ Ch·ªâ ƒê·ªãnh</h6>
                      <h2 className="fw-bold text-info mb-0">{assignedServices}</h2>
                      <small className="text-muted">Ch·ªù x·ª≠ l√Ω</small>
                    </div>
                    <div className="bg-info bg-opacity-10 p-3 rounded">
                      <i className="fas fa-clock fa-2x text-info"></i>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Col>

        {/* Main Services Table - DANH S√ÅCH CH·ªà ƒê·ªäNH */}
        <Col xl={12}>
          <Card className="border-0 shadow-sm">
            <Card.Header className="bg-white py-3 border-bottom">
              <div className="d-flex justify-content-between align-items-center">
                <h5 className="mb-0 fw-bold text-dark">
                  <i className="fas fa-list-check text-primary me-2"></i>
                  Danh S√°ch D·ªãch V·ª• ƒê∆∞·ª£c Ch·ªâ ƒê·ªãnh
                </h5>
                <div className="text-muted">
                  <small>
                    <i className="fas fa-sync-alt me-1"></i>
                    C·∫≠p nh·∫≠t: {new Date().toLocaleTimeString('vi-VN')}
                  </small>
                </div>
              </div>
            </Card.Header>

            <Card.Body className="p-0">
              {loading ? (
                <div className="text-center py-5">
                  <Spinner animation="border" variant="primary" size="lg" />
                  <p className="mt-3 text-muted fs-5">ƒêang t·∫£i d·ªØ li·ªáu...</p>
                </div>
              ) : testResultsData.length > 0 ? (
                <div className="table-responsive">
                  <Table hover className="mb-0 align-middle">
                    <thead className="table-light">
                      <tr>
                        <th width="60" className="text-center py-3">#</th>
                        <th width="120" className="py-3">M√£ D·ªãch V·ª•</th>
                        <th width="120" className="py-3">M√£ L·ªãch</th>
                        <th className="py-3">B·ªánh Nh√¢n</th>
                        <th width="80" className="text-center py-3">Tu·ªïi</th>
                        <th width="100" className="text-center py-3">Gi·ªõi T√≠nh</th>
                        <th className="py-3">D·ªãch V·ª•</th>
                        <th width="150" className="text-center py-3">B√°c Sƒ© Ch·ªâ ƒê·ªãnh</th>
                        <th width="120" className="text-center py-3">Gi√°</th>
                        <th width="140" className="text-center py-3">Ng√†y Ch·ªâ ƒê·ªãnh</th>
                        <th width="140" className="text-center py-3">Tr·∫°ng Th√°i</th>
                        <th width="180" className="text-center py-3">Thao T√°c</th>
                      </tr>
                    </thead>
                    <tbody>
                      {testResultsData.map((service, index) => (
                        <tr key={service.service_order_id} className="border-bottom">
                          <td className="text-center">
                            <span className="fw-semibold text-muted">{index + 1}</span>
                          </td>

                          <td>
                            <Badge bg="primary" className="fs-7 w-100">
                              #{service.service_order_id}
                            </Badge>
                          </td>

                          <td>
                            <span className="text-muted fw-semibold">#{service.appointment_id}</span>
                          </td>

                          <td>
                            <div>
                              <div className="fw-semibold text-dark">{service.patient_name}</div>
                              {service.patient_phone && service.patient_phone !== 'N/A' && (
                                <small className="text-muted">
                                  <i className="fas fa-phone me-1"></i>
                                  {service.patient_phone}
                                </small>
                              )}
                            </div>
                          </td>

                          <td className="text-center">
                            <span className="fw-semibold">{service.patient_age}</span>
                          </td>

                          <td className="text-center">
                            <Badge
                              bg={service.patient_gender === 'Nam' ? 'info' : 'danger'}
                              className="fs-7"
                            >
                              {service.patient_gender}
                            </Badge>
                          </td>

                          <td>
                            <div className="fw-semibold text-dark">{service.service_name}</div>
                            <small className="text-muted">{service.service_type}</small>
                          </td>

                          <td className="text-center">
                            <small className="text-dark fw-semibold">
                              {service.referring_doctor_name}
                            </small>
                          </td>

                          <td className="text-center">
                            <Badge bg="outline-success" className="border text-success fs-7">
                              {formatPrice(service.price)}
                            </Badge>
                          </td>

                          <td className="text-center">
                            <small className="text-muted">{formatDate(service.order_date)}</small>
                          </td>

                          <td className="text-center">
                            <Badge
                              bg={getStatusVariant(service.status)}
                              className="fs-7 px-3 py-2"
                            >
                              {service.status}
                            </Badge>
                          </td>

                          <td className="text-center">
                            <div className="d-flex justify-content-center gap-2">
                              {/* ‚úÖ N√öT B·∫ÆT ƒê·∫¶U - KHI "ƒê√£ ch·ªâ ƒë·ªãnh" ho·∫∑c "ƒêang ch·ªù" */}
                              {(service.status === 'ƒê√£ ch·ªâ ƒë·ªãnh' || service.status === 'ƒêang ch·ªù') && (
                                <Button
                                  variant="primary"
                                  size="sm"
                                  className="px-3"
                                  onClick={() => confirmStatusChange(
                                    service.service_order_id,
                                    service.patient_name,
                                    service.service_name,
                                    'ƒêang th·ª±c hi·ªán',
                                    'start'
                                  )}
                                  disabled={localLoading}
                                >
                                  <i className="fas fa-play me-1"></i>
                                  B·∫Øt ƒë·∫ßu
                                </Button>
                              )}

                              {/* ‚úÖ N√öT HO√ÄN TH√ÄNH - KHI "ƒêang th·ª±c hi·ªán" */}
                              {service.status === 'ƒêang th·ª±c hi·ªán' && (
                                <Button
                                  variant="success"
                                  size="sm"
                                  className="px-3"
                                  onClick={() => confirmStatusChange(
                                    service.service_order_id,
                                    service.patient_name,
                                    service.service_name,
                                    'Ho√†n th√†nh',
                                    'complete'
                                  )}
                                  disabled={localLoading}
                                >
                                  <i className="fas fa-check me-1"></i>
                                  Ho√†n th√†nh
                                </Button>
                              )}

                              {/* ‚úÖ N√öT K·∫æT QU·∫¢ - HI·ªÇN TH·ªä CHO T·∫§T C·∫¢ TR·∫†NG TH√ÅI */}
                              <Button
                                variant="info"
                                size="sm"
                                className="px-3"
                                onClick={() => handleTestResult(
                                  service.service_order_id,
                                  service.patient_name,
                                  service.service_name,
                                  service.result || ''
                                )}
                                disabled={localLoading}
                              >
                                <i className="fas fa-vial me-1"></i>
                                K·∫øt qu·∫£
                              </Button>

                              {/* ‚úÖ N√öT H·ª¶Y - KHI CH∆ØA HO√ÄN TH√ÄNH */}
                              {service.status !== 'Ho√†n th√†nh' && service.status !== 'ƒê√£ h·ªßy' && (
                                <Button
                                  variant="outline-danger"
                                  size="sm"
                                  className="px-3"
                                  onClick={() => confirmStatusChange(
                                    service.service_order_id,
                                    service.patient_name,
                                    service.service_name,
                                    'ƒê√£ h·ªßy',
                                    'cancel'
                                  )}
                                  disabled={localLoading}
                                >
                                  <i className="fas fa-times me-1"></i>
                                  H·ªßy
                                </Button>
                              )}
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </Table>
                </div>
              ) : (
                <div className="text-center py-5">
                  <div className="py-4">
                    <i className="fas fa-clipboard-list fa-4x text-muted mb-3 opacity-50"></i>
                    <h4 className="text-muted fw-light mb-3">Kh√¥ng c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh</h4>
                    <p className="text-muted mb-0">
                      Hi·ªán t·∫°i kh√¥ng c√≥ d·ªãch v·ª• x√©t nghi·ªám n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh cho b·∫°n.
                    </p>
                  </div>
                </div>
              )}
            </Card.Body>

            {/* Footer Summary */}
            {testResultsData.length > 0 && (
              <Card.Footer className="bg-light py-3">
                <div className="row align-items-center">
                  <div className="col-md-6">
                    <small className="text-muted">
                      Hi·ªÉn th·ªã <strong>{testResultsData.length}</strong> d·ªãch v·ª• ‚Ä¢
                      T·ªïng gi√° tr·ªã: <strong className="text-success">{formatPrice(totalRevenue)}</strong>
                    </small>
                  </div>
                  <div className="col-md-6 text-md-end">
                    <small className="text-muted">
                      Gi√° trung b√¨nh: <strong>{formatPrice(averagePrice)}</strong>
                    </small>
                  </div>
                </div>
              </Card.Footer>
            )}
          </Card>
        </Col>

        {/* ‚úÖ PH·∫¶N K·∫æT QU·∫¢ X√âT NGHI·ªÜM - GI·ªÆ NGUY√äN */}
        <Col xl={12} className="mb-4">
          <Card className="border-0 shadow-sm">
            <Card.Header className="bg-success bg-gradient text-white py-3">
              <div className="d-flex justify-content-between align-items-center">
                <h4 className="mb-0 fw-bold">
                  <i className="fas fa-vials me-2"></i>
                  K·∫øt Qu·∫£ X√©t Nghi·ªám
                </h4>
                <Badge bg="light" text="dark" className="fs-6">
                  <i className="fas fa-list me-1"></i>
                  T·ªïng: {completedServicesData.length} k·∫øt qu·∫£
                </Badge>
              </div>
            </Card.Header>
            <Card.Body className="p-0">
              <div className="table-responsive">
                <Table hover className="mb-0 align-middle">
                  <thead className="table-light">
                    <tr>
                      <th width="80" className="text-center py-3">M√£ L·ªãch</th>
                      <th width="120" className="py-3">M√£ B·ªánh Nh√¢n</th>
                      <th className="py-3">T√™n B·ªánh Nh√¢n</th>
                      <th className="py-3">D·ªãch V·ª•</th>
                      <th width="140" className="text-center py-3">Ng√†y X√©t Nghi·ªám</th>
                      <th width="120" className="text-center py-3">Tr·∫°ng Th√°i</th>
                      <th width="200" className="text-center py-3">H√†nh ƒê·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {/* Hi·ªÉn th·ªã c√°c d·ªãch v·ª• ƒë√£ ho√†n th√†nh */}
                    {completedServicesData.map((service, index) => (
                      <tr key={service.service_order_id} className="border-bottom">
                        <td className="text-center">
                          <Badge bg="primary" className="fs-7">#{service.appointment_id}</Badge>
                        </td>
                        <td>
                          <span className="text-muted fw-semibold">#BN{service.patient_id || 'N/A'}</span>
                        </td>
                        <td>
                          <div className="fw-semibold text-dark">{service.patient_name}</div>
                          <small className="text-muted">{service.patient_age} tu·ªïi - {service.patient_gender}</small>
                        </td>
                        <td>
                          <div className="fw-semibold text-dark">{service.service_name}</div>
                          <small className="text-muted">{service.service_type}</small>
                        </td>
                        <td className="text-center">
                          <small className="text-muted">{formatDate(service.order_date)}</small>
                        </td>
                        <td className="text-center">
                          <Badge bg="success" className="fs-7 px-3 py-2">
                            <i className="fas fa-check me-1"></i>
                            Ho√†n th√†nh
                          </Badge>
                        </td>
                        <td className="text-center">
                          <div className="d-flex justify-content-center gap-2">
                            <Button
                              variant="outline-primary"
                              size="sm"
                              className="px-3"
                              onClick={() => alert(`K·∫øt qu·∫£: ${service.result || 'Ch∆∞a c√≥ k·∫øt qu·∫£'}`)}
                            >
                              <i className="fas fa-eye me-1"></i>
                              Xem
                            </Button>
                            <Button
                              variant="outline-success"
                              size="sm"
                              className="px-3"
                            >
                              <i className="fas fa-print me-1"></i>
                              In
                            </Button>
                            <Button
                              variant="outline-warning"
                              size="sm"
                              className="px-3"
                              onClick={() => handleTestResult(
                                service.service_order_id,
                                service.patient_name,
                                service.service_name,
                                service.result || ''
                              )}
                            >
                              <i className="fas fa-edit me-1"></i>
                              S·ª≠a
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}

                    {/* N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ n√†o */}
                    {completedServicesData.length === 0 && (
                      <tr>
                        <td colSpan="7" className="text-center py-4">
                          <i className="fas fa-vials fa-2x text-muted mb-2 opacity-50"></i>
                          <p className="text-muted mb-0">Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám n√†o</p>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </Table>
              </div>

              {/* Footer v·ªõi th·ªëng k√™ */}
              <Card.Footer className="bg-light py-3">
                <div className="row align-items-center">
                  <div className="col-md-6">
                    <small className="text-muted">
                      Hi·ªÉn th·ªã <strong>{completedServicesData.length}</strong> k·∫øt qu·∫£ x√©t nghi·ªám ‚Ä¢
                      C·∫≠p nh·∫≠t: <strong>{new Date().toLocaleTimeString('vi-VN')}</strong>
                    </small>
                  </div>
                  <div className="col-md-6 text-md-end">
                    <div className="d-flex justify-content-end gap-3">
                      <small className="text-muted">
                        <Badge bg="success" className="me-1">{completedServicesData.length}</Badge> Ho√†n th√†nh
                      </small>
                    </div>
                  </div>
                </div>
              </Card.Footer>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default TechnicianSection;